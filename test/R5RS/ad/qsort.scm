(define (quick-sort vector)
  (define (swap v index1 index2)
    (let ((temp (vector-ref v index1)))
      (vector-set! v index1 (vector-ref v index2))
      (vector-set! v index2 temp)))
  (define (quick-sort-aux low high)
    (define (quick-sort-aux-iter mid-value from to)
      (define (quick-right index1)
        (if (and (< index1 high)(< (vector-ref vector index1) mid-value))
            (quick-right (+ index1 1))
            index1))
      (define (quick-left index2)
        (if (and (> index2 low)(> (vector-ref vector index2) mid-value))
            (quick-left (- index2 1))
            index2))
      (let ((index1 (quick-right (+ from 1)))
            (index2 (quick-left to)))
        (cond ((< index1 index2)
               (swap vector index1 index2)
               (quick-sort-aux-iter mid-value index1 index2))
              (else index2))))
    (if (< low high)
	(let ((middle (quotient (+ low high) 2))
	      (pivot-index (+ low 1)))
           (swap vector  middle pivot-index)
           (if(> (vector-ref vector pivot-index)
                 (vector-ref vector high))
              (swap vector pivot-index high))
           (if(> (vector-ref vector  low)
                 (vector-ref vector high))
              (swap vector low high))
           (if(< (vector-ref vector pivot-index)
                 (vector-ref vector low))
              (swap vector pivot-index low))
           (let ((mid-index
                   (quick-sort-aux-iter (vector-ref vector pivot-index)
                                        (+ low 1) high )))
             (swap vector mid-index pivot-index)
             (quick-sort-aux low (- mid-index 1))
             (quick-sort-aux (+ mid-index 1) high)))))
  (quick-sort-aux 0 (- (vector-length vector) 1)))

(define test3 (vector 8 3 6 6 1 5 4 2 9 6))
(quick-sort test3)
(equal? test3 (vector 1 2 3 4 5 6 6 6 8 9))
