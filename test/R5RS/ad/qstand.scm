(define (quick-sort vector)
  (define (swap vector index1 index2)
    (let ((temp (vector-ref vector index1)))
      (vector-set! vector index1 (vector-ref vector index2))
      (vector-set! vector index2 temp)))
   (define (quick-sort-aux low high)
       (define (quick-sort-aux-iter mid-value from to)
          (define (quick-right index1)
            (if (< (vector-ref vector index1) mid-value)
                (quick-right (+ index1 1))
                index1))
          (define (quick-left index2)
            (if (> (vector-ref vector index2) mid-value)
                (quick-left (- index2 1))
                index2))
          (let ((index1 (quick-right (+ from 1)))
                (index2 (quick-left to)))
            (cond ((< index1 index2)
                   (swap vector index1 index2)
                   (quick-sort-aux-iter mid-value index1 index2))
                  (else index2))))
        (if (< low high)
	    (begin
               (if (> (vector-ref vector low)
                   (vector-ref vector high))
                   (swap vector low high))
               (let ((mid-index
                      (quick-sort-aux-iter (vector-ref vector low)
                                           low high)))
                 (swap vector mid-index low)
                 (quick-sort-aux low (- mid-index 1))
                 (quick-sort-aux (+ mid-index 1) high)))))
  (quick-sort-aux 0 (- (vector-length vector) 1)))

(define test1 (vector 7 2 4 6 0 8 5 3 1))
(quick-sort test1)

(define test2 (vector 8 1 4 9 6 3 5 2 7 0))
(quick-sort test2)

(define test3 (vector 8 3 6 6 1 5 4 2 9 6))
(quick-sort test3)

(and (equal? test1 (vector 0 1 2 3 4 5 6 7 8))
     (equal? test2 (vector 0 1 2 3 4 5 6 7 8 9))
     (equal? test3 (vector 1 2 3 4 5 6 6 6 8 9)))