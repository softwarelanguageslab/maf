(define (bubble-sort vector)
  (define (swap vector index1 index2)
    (let ((temp (vector-ref vector index1)))
      (vector-set! vector index1 (vector-ref vector index2))
      (vector-set! vector index2 temp)))
  (define (bubble index)
    (define (bubble-iter index1 changed)
        (cond ((<= index1 index)
               (if(> (vector-ref vector index1)
                     (vector-ref vector (+ index1 1)))
		  (begin
                      (swap vector index1 (+ index1 1))
                      (set! changed #t)))
               (bubble-iter (+ index1 1) changed))
              (else changed)))
    (bubble-iter 0 #f))
  (define (bubble-sort-iter index)
    (if(>= index 0)
       (if (bubble index)
           (bubble-sort-iter (- index 1)))))
  (bubble-sort-iter (- (vector-length vector) 2)))

(define vect (vector 9 5 1 7 8 9 4 6 2 3 ))
(bubble-sort vect)
(equal? vect (vector 1 2 3 4 5 6 7 8 9 9))