(define (quick-sort a-list)
  (define (rearrange pivot some-list)
    (define (rearrange-iter rest result)
      (if(null? rest)
         result
         (if( <= (car rest) pivot)
            (rearrange-iter (cdr rest)
                            (cons (cons (car rest)
                                        (car result))
                                  (cdr result)))
            (rearrange-iter (cdr rest)
                            (cons (car result)
                                  (cons (car rest)
                                        (cdr result)))))))
    (rearrange-iter some-list (cons '() '())))
  (if (<= (length a-list) 1)
      a-list
      (let* ((pivot (car a-list))
             (sub-lists (rearrange pivot (cdr a-list))))
        (append (quick-sort (car sub-lists))
                (append (list pivot)
                        (quick-sort (cdr sub-lists)))))))

(equal? (quick-sort '(9 8 7 6 5 4 3 2 1 0 9)) '(0 1 2 3 4 5 6 7 8 9 9))
