(define (compare lijst1 lijst2)
  (cond ((or (null? lijst1) (null? lijst2)) 0)
        ((eq? (car lijst1) (car lijst2))
         (+ 1 (compare (cdr lijst1) (cdr lijst2))))
        (else 0)))

(define (compare-iter lijst1 lijst2)
  (define (loop l1 l2 res)
    (cond ((or (null? l1) (null? l2)) res)
          ((eq? (car l1) (car l2)) (loop (cdr l1) (cdr l2) (+ res 1)))
          (else res)))
  (loop lijst1 lijst2 0))

 (define (algemene-compare lijst1 lijst2 test)
  (cond ((or (null? lijst1) (null? lijst2)) 0)
        ((test (car lijst1) (car lijst2))
         (+ 1 (algemene-compare (cdr lijst1) (cdr lijst2) test)))
        (else 0)))

 (define (compare-greater lijst1 lijst2)
  (algemene-compare lijst1 lijst2 >))

 (and (= (compare '(a b c d e f g) '(a b c x y)) 3)
      (= (compare '(x a b) '(a b c d e f g)) 0)
      (= (compare '(a b c e f g) '(a b)) 2)
      (= (compare-iter '(a b c d e f g) '(a b c x y)) 3)
      (= (compare-iter '(x a b) '(a b c d e f g)) 0)
      (= (compare-iter '(a b c e f g) '(a b)) 2)
      (= (compare-greater '(3 5 6 1 2 5) '(2 1 0 8 5 5)) 3))