(define (create-counter initial)
  (define (increase) (set! initial (+ initial 1)))
  (define (decrease) (set! initial (- initial 1)))
  (define (read) initial)
  (define (dispatch m)
    (cond ((eq? m 'increase) (increase))
          ((eq? m 'decrease) (decrease))
          ((eq? m 'read) (read))
          (else (display "wrong message"))))
  dispatch)

(define (create-parking . capaciteiten)
  (let ((verdieping-ctrs (map create-counter capaciteiten))
        (nr-verdiepingen (length capaciteiten))
        (nbr-cars 0))

    (define (total-capacity)
      (apply + capaciteiten))

    (define (full?)
      (= nbr-cars (total-capacity)))

    (define (empty?)
      (= nbr-cars 0))

    (define (max-reached-level level idx)
      (>=  (level 'read) (list-ref capaciteiten (- idx 1))))

    (define (level-current)
      (define (loop lst index)
        (cond ((null? lst) #f)
              (else (let* ((level (car lst))
                           (capacity (level 'read)))
                      (if (> capacity 0)
                          index
                          (loop (cdr lst) (+ index 1)))))))
      (loop verdieping-ctrs 1))

    (define (level-to-leave)
      (define (loop lst index)
        (cond ((null? lst) #f)
              (else (let* ((level (car lst))
                           (capacity (level 'read)))
                      (if (and (not (max-reached-level level index)) (>= capacity 0))
                          index
                          (loop (cdr lst) (- index 1)))))))
      (loop (reverse verdieping-ctrs) nr-verdiepingen))

    (define (car-enters)
      (let ((level (level-current)))
        (if level
            (let ((verdieping-ctr (list-ref verdieping-ctrs
                                            (- level 1))))
              (set! nbr-cars (+ nbr-cars 1))
              (verdieping-ctr 'decrease))
            #f)))

    (define (car-leaves)
      (let ((level (level-to-leave)))

        (if level
            (let ((verdieping-ctr (list-ref verdieping-ctrs (- level 1))))
              (set! nbr-cars (- nbr-cars 1))
              (verdieping-ctr 'increase))
            (let ((verdieping-ctr (list-ref verdieping-ctrs(- nr-verdiepingen 1))))
              (set! nbr-cars (- nbr-cars 1))
              (verdieping-ctr 'increase)))))

    (define (dispatch msg)
      (cond ((eq? msg 'full?) (full?))
            ((eq? msg 'empty?) (empty?))
            ((eq? msg 'level) (level-current))
            ((eq? msg 'car-enters) (car-enters))
            ((eq? msg 'lst) verdieping-ctrs)
            ((eq? msg 'car-leaves) (car-leaves))
            (else (error "wrong message"))))
    dispatch))

(define parking (create-parking 3 5 2))
(and (= (parking 'level) 1)
     (not (parking 'full?))
     (= (begin (parking 'car-enters)
               (parking 'car-enters)
               (parking 'car-enters)
               (parking 'car-enters)
               (parking 'level))
        2)
     (not (parking 'empty?))
     (begin (parking 'car-enters)
            (parking 'car-enters)
            (parking 'car-enters)
            (parking 'car-enters)
            (parking 'car-enters)
            (parking 'car-enters)
            (parking 'full?))
     (not (parking 'car-enters))
     (= (begin (parking 'car-leaves)
               (parking 'car-leaves)
               (parking 'car-leaves)
               (parking 'level))
        2))