(define result '())
(define output (lambda (i) (set! result (cons i result))))

(define (kw-lijst lst)
  (define (loop l)
    (let ((rest (cdr l))
          (n (list (* (car l) (car l)))))
      (set-cdr! l n)
      (set-cdr! n rest)
      (if (not (eq? rest lst))
          (loop rest))))
  (loop lst)
  lst)

(define (print-ring r)
  (define (aux l)
    (if (not (null? l))
        (if (eq? (cdr l) r)
            (begin (output " ")
                   (output (car l))
                   (output "..."))
            (begin (output " ")
                   (output (car l))
                   (aux (cdr l))))))
  (aux r)
  #t)

(define last-cons (cons 3 '()))
(define test-lst (cons 1 (cons 4 last-cons)))
(set-cdr! last-cons test-lst)
(print-ring (kw-lijst test-lst))
(equal? result '("..." 9 " " 3 " " 16 " " 4 " " 1 " " 1 " "))