(define (make-seq count odd)
  (define (generate-call current)
    (if (= current odd)
        `(g ,current)
        `(f ,current)))
  (define (generate-name current)
    (string->symbol 
     (string-append "_tmp" (number->string current))))
  (let loop ((current 1))
    (if (= current count)
        (generate-call current)
        `(let ((,(generate-name current) ,(generate-call current)))
           ,(loop (+ current 1))))))

(define (generate-benchmark count odd)
  `(letrec ((f (lambda (x) (+ (* x x) (* x x))))
            (g (lambda (x) (+ (* x x) (* x x)))))
     ,(make-seq count odd)))

(define (generate-base-benchmark count)
  (generate-benchmark count 0))

(define (generate-modf-benchmark count n)
  (generate-benchmark count n))

(define (generate-benchmarks n dir)
  (define base (generate-base-benchmark n))
  (define base-loc (string-append dir "f-base.scm"))
  (define out (open-output-file base-loc 'replace))
  (write base out)
  (close-output-port out)
  (let loop ((i 0))
    (define prg (generate-modf-benchmark n i))
    (define loc (string-append dir "f-" (number->string i) ".scm"))
    (define out (open-output-file loc 'replace))
    (write prg out)
    (close-output-port out)
    (if (< i n)
        (loop (+ i 1)))))

;;(generate-benchmarks 10 "/Users/nvanes/Dropbox/thesis/benchmarks/f1-tests/")