(define *actors* (ref '()))
(define *actors-lock* (new-lock))
(define (register-new-actor name f)
  (acquire *actors-lock*)
  (ref-set *actors* (cons (list name f (new-lock) (ref '())) (deref *actors*)))
  (release *actors-lock*))
(define (find-actor name)
  (let ((v (assoc name (deref *actors*))))
    (if v
        v
        (error "no actor found"))))
(define (actor-lock name)
  (caddr (find-actor name)))
(define (actor-mailbox name)
  (cadddr (find-actor name)))
(define (generate-new-name) (random 42))
(define (actor f)
  (lambda (init-state name)
    (letrec ((loop (lambda (receive state)
                     (let ((mb (actor-mailbox name))
                           (lock (actor-lock name)))
                       (if (null? (deref mb))
                           ;; nothing to receive, wait
                           (<change> (begin (loop receive state)) (loop receive state)) ; <=============================
                           ;; message to receive
                           (begin
                             (acquire (actor-lock name))
                             (let ((message (car (deref mb))))
                               (ref-set mb (cdr (deref mb)))
                               (release (actor-lock name))
                               (let ((action (receive name state (car message) (cdr message))))
                                 (if (eq? action 'terminate)
                                     (<change> (begin 'done) 'done) ; <=================================================
                                     (loop (car action) (cdr action)))))))))))
      (loop f init-state))))
(define (create act state)
  (let* ((name (generate-new-name)))
    (register-new-actor name (lambda () 'toremove))
    (fork (act state name))
    name))
(define (become self act st) (cons (act st self) st))
(define (terminate) 'terminate)
(define (send target tag args)
  (let ((lock (actor-lock target))
        (mb (actor-mailbox target)))
    (acquire lock)
    (ref-set mb (append (deref mb) (list (cons tag args))))
    (release lock)))

(define (split from to)
  (let ((half (quotient (- to from) 2)))
    (list (cons from (+ from half))
          (cons (+ from half 1) to))))

(define fact-actor
  (actor
   (lambda (self state tag args)
     (if (eq? tag 'compute)
         (let ((from (car args))
               (to (cadr args))
               (parent (caddr args)))
           (if (<= (- to from) 1)
               (begin
                 (if (= from to)
                     (send parent 'computed (list from))
                     (send parent 'computed (list (* from to))))
                 (terminate))
               (let ((steps (split from to)))
                 (map (lambda (bounds)
                        (send (create fact-actor '())
                              'compute
                              (list (car bounds) (cdr bounds) self)))
                      steps)
                 (become self fact-actor-wait (list 0 (length steps) 1 parent)))))
         (error "unknown message")))))
(define fact-actor-wait
  (actor
   (lambda (self state tag args)
     (let ((received (car state))
           (fragments (cadr state))
           (current (caddr state))
           (parent (cadddr state)))
       (if (eq? tag 'computed)
           (let* ((result (car args))
                  (new-result (* current result)))
             (if (= (+ received 1) fragments)
                 (begin
                   (send parent 'computed (list new-result))
                   (terminate))
                 (become self fact-actor-wait
                         (list
                          (+ received 1) fragments new-result parent))))
           (error "unknown message"))))))
(define master-actor
  (actor
   (lambda (self state tag args)
     (if (eq? tag 'compute)
         (let ((n (car args)))
           (send (create fact-actor '()) 'compute (list 1 n self))
           (become self master-actor '()))
         (if (eq? tag 'computed)
             (let ((res (car args)))
               (display res)
               (terminate))
             (error "unknown message"))))))
(define act (create master-actor '()))
(send act 'compute (list (random 42)))