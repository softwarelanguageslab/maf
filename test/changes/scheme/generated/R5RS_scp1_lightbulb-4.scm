; Changes:
; * removed: 1
; * added: 1
; * swaps: 0
; * negated predicates: 1
; * swapped branches: 0
; * calls to id fun: 3
(letrec ((MaakLampje (lambda (aantal)
                       (<change>
                          (letrec ((state 'off)
                                   (on! (lambda ()
                                          (set! state 'on)))
                                   (off! (lambda ()
                                           (set! state 'off)))
                                   (broken! (lambda ()
                                              (set! state 'broken)))
                                   (on? (lambda ()
                                          (eq? state 'on)))
                                   (off? (lambda ()
                                           (eq? state 'off)))
                                   (broken? (lambda ()
                                              (eq? state 'broken)))
                                   (switch! (lambda ()
                                              (set! aantal (- aantal 1))
                                              (if (< aantal 0)
                                                 (broken!)
                                                 (if (off?) (on!) (if (on?) (off!) #f)))
                                              (not (broken?))))
                                   (change! (lambda (nieuw)
                                              (off!)
                                              (set! aantal nieuw)
                                              'changed))
                                   (dispatch (lambda (msg)
                                               (if (eq? msg 'switch!)
                                                  (switch!)
                                                  (if (eq? msg 'on?)
                                                     (on?)
                                                     (if (eq? msg 'off?)
                                                        (off?)
                                                        (if (eq? msg 'test?)
                                                           (broken?)
                                                           (if (eq? msg 'change!)
                                                              change!
                                                              (error "Message not understood.")))))))))
                             dispatch)
                          ((lambda (x) x)
                             (letrec ((state 'off)
                                      (on! (lambda ()
                                             (<change>
                                                (set! state 'on)
                                                ((lambda (x) x) (set! state 'on)))))
                                      (off! (lambda ()
                                              (set! state 'off)))
                                      (broken! (lambda ()
                                                 (set! state 'broken)))
                                      (on? (lambda ()
                                             (eq? state 'on)))
                                      (off? (lambda ()
                                              (eq? state 'off)))
                                      (broken? (lambda ()
                                                 (eq? state 'broken)))
                                      (switch! (lambda ()
                                                 (<change>
                                                    (set! aantal (- aantal 1))
                                                    ())
                                                 (if (< aantal 0)
                                                    (broken!)
                                                    (if (off?) (on!) (if (on?) (off!) #f)))
                                                 (not (broken?))))
                                      (change! (lambda (nieuw)
                                                 (off!)
                                                 (set! aantal nieuw)
                                                 'changed))
                                      (dispatch (lambda (msg)
                                                  (if (eq? msg 'switch!)
                                                     (switch!)
                                                     (if (eq? msg 'on?)
                                                        (on?)
                                                        (if (eq? msg 'off?)
                                                           (off?)
                                                           (if (eq? msg 'test?)
                                                              (broken?)
                                                              (if (eq? msg 'change!)
                                                                 change!
                                                                 (error "Message not understood.")))))))))
                                (<change>
                                   dispatch
                                   ((lambda (x) x) dispatch)))))))
         (philips (MaakLampje 5)))
   (if (not (philips 'test?))
      (if (not (philips 'on?))
         (if (philips 'off?)
            (if (philips 'switch!)
               (if (philips 'switch!)
                  (if (philips 'switch!)
                     (if (philips 'switch!)
                        (if (<change> (philips 'switch!) (not (philips 'switch!)))
                           (if (not (philips 'switch!))
                              (if (philips 'test?)
                                 (if (begin ((philips 'change!) 10) (<change> () (philips 'test?)) (not (philips 'test?)))
                                    (philips 'off?)
                                    #f)
                                 #f)
                              #f)
                           #f)
                        #f)
                     #f)
                  #f)
               #f)
            #f)
         #f)
      #f))