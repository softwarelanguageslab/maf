#lang racket/base

(require racket/contract
         "data.rkt")
(define g8 (and/c byte? positive?))
(define g9 (or/c g8))
(define g10 (and/c exact-nonnegative-integer? positive?))
(define g11 (or/c g10))
(define g12 (lambda (x) (world? x)))
(define generated-contract3 g9)
(define generated-contract4 (-> (values g11)))
(define generated-contract5 g9)
(define generated-contract6 g9)
(define generated-contract7 (-> (values g12)))
(provide (contract-out
          (BOARD-HEIGHT-PIXELS generated-contract4)
          (BOARD-WIDTH generated-contract5)
          (GRID-SIZE generated-contract6)
          (BOARD-HEIGHT generated-contract3)
          (WORLD generated-contract7)))
(module require/contracts racket/base
  (require racket/contract)
  (provide (contract-out)))
(require 'require/contracts)
(require "data-adaptor.rkt")
(define GRID-SIZE 30)
(define BOARD-HEIGHT 20)
(define BOARD-WIDTH 30)
(define (BOARD-HEIGHT-PIXELS) (* GRID-SIZE BOARD-HEIGHT))
(define (BOARD-WIDTH-PIXELS) (* GRID-SIZE BOARD-WIDTH))
(define (SEGMENT-RADIUS) (/ GRID-SIZE 2))
(define (FOOD-RADIUS) (SEGMENT-RADIUS))
(define (WORLD)
  (world (snake "right" (cons (posn 5 3) null)) (posn 8 12)))
(provide)
