#lang racket/base

(require racket/contract)

(define g28 real?)
(define g29 (or/c g28))
(define g30 (lambda (x) (posn? x)))
(define g31 #t)
(define g32 #t)
(define g33 any/c)
(define g34 '#t)
(define g35 '#f)
(define g36 (or/c g34 g35))
(define g37 (-> g33 (values g36)))
(define g38 (or/c g32 g37))
(define g39 '"right")
(define g40 '"left")
(define g41 '"down")
(define g42 '"up")
(define g43 (or/c g39 g40 g41 g42))
(define g44 (listof g30))
(define g45 (cons/c g30 g44))
(define g46 (lambda (x) (snake? x)))
(define g47 (lambda (x) (world? x)))
(define generated-contract9 g31)
(define generated-contract10 g38)
(define generated-contract11 (-> g30 (values g29)))
(define generated-contract12 (-> g30 (values g29)))
(define generated-contract14 (-> g29 g29 (values g30)))
(define generated-contract15 (-> g30 g30 (values g36)))
(define generated-contract16 g31)
(define generated-contract17 g38)
(define generated-contract18 (-> g46 (values g45)))
(define generated-contract19 (-> g46 (values g43)))
(define generated-contract21 (-> g43 g45 (values g46)))
(define generated-contract22 g31)
(define generated-contract23 g38)
(define generated-contract24 (-> g47 (values g30)))
(define generated-contract25 (-> g47 (values g46)))
(define generated-contract27 (-> g46 g30 (values g47)))
(provide (contract-out
          (posn=? generated-contract15)
          (struct posn ((x g29) (y g29)))
          (struct world ((snake g46) (food g30)))
          (struct snake ((dir g43) (segs g45)))))
(module require/contracts racket/base
  (require racket/contract)
  (provide (contract-out)))
(require 'require/contracts)
(struct snake (dir segs))
(struct world (snake food))
(struct posn (x y))

(define (posn=? p1 p2)
  (and (= (posn-x p1) (posn-x p2)) (= (posn-y p1) (posn-y p2))))
(provide)
