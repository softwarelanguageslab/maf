;; Random number generate sharing state among multiple threads

(define N (+ (random 42) 10))
(define (range from to)
  (if (= from to)
      (cons from '())
      (cons from (range (+ from 1) to))))

(define (rng seed)
  (letrec ((state (ref seed))
           (lock (new-lock)))
    (lambda ()
      (acquire lock)
      (ref-set state (modulo (+ (* 5245 (deref state)) 12345) 107374182))
      (let ((n (modulo (quotient (deref state) 65535) 32768)))
        (release lock)
        n))))
(define gen (rng 100))
(define ts (map (lambda (x) (fork (gen))) (range 1 N)))
(map (lambda (t) (join t)) ts)
