(letrec ((lock (atom #f))
         (acq (lambda ()
               (if (compare-and-set! lock #f #t)
                #t
                (acq))))
         (rel (lambda ()
               (set! lock #f)))
         (counter 0)
         (inc (lambda ()
               (acq)
               (set! counter (+ counter 1))
               (rel)))
         (t1 (future (inc)))
         (t2 (future (inc)))
         (t3 (future (inc))))
 (deref t1)
 (deref t2)
 (deref t3)
 (= counter 3))