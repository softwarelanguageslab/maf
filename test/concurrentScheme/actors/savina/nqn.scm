(define NumWorkers (int-top))
(define Priorities (int-top))
(define Threshold (int-top))
(define Size (int-top))
(define SolutionsLimit (int-top))
(define (build-vector n f)
  (letrec ((v (make-vector n (f 0)))
           (loop (lambda (i)
                   (if (< i n)
                       (begin
                         (vector-set! v i (f i))
                         (loop (+ i 1)))
                       v))))
    (loop 1)))
(define (vector-foreach f v)
  (letrec ((loop (lambda (i)
                   (if (< i (vector-length v))
                       (begin
                         (f (vector-ref v i))
                         (loop (+ i 1)))
                       'done))))
    (loop 0)))

(define master-actor-init
  (actor "master-actor" ()
           (start ()
                  (let ((workers (build-vector NumWorkers (lambda (i) (create worker-actor a/self i)))))
                    (send (vector-ref workers 0) work '() 0)
                    (become master-actor
                              workers
                              0 1 0 1 0)))))

(define master-actor
  (actor "master-actor" (workers result-counter message-counter num-workers-terminated num-work-sent num-work-completed)
           (work (data depth)
                 (send (vector-ref workers message-counter) work data depth)
                 (become master-actor workers result-counter (modulo (+ message-counter 1) NumWorkers) num-workers-terminated (+ 1 num-work-sent) num-work-completed))
           (result ()
                   (if (= (+ result-counter 1) SolutionsLimit)
                       (vector-foreach (lambda (w) (send w stop)) workers)
                       #t)
                   (become master-actor workers (+ result-counter 1) message-counter num-workers-terminated num-work-sent num-work-completed))
           (done ()
                 (if (= (+ num-work-completed 1) num-work-sent)
                     (vector-foreach (lambda (w) (send w stop)) workers)
                     #t)
                 (become master-actor workers result-counter message-counter num-workers-terminated num-work-sent (+ num-work-completed 1)))
           (stop ()
                 (if (= (+ num-workers-terminated 1) NumWorkers)
                     (terminate)
                     (become master-actor workers result-counter message-counter (+ num-workers-terminated 1) num-work-sent num-work-completed)))))
(define (copy-append-i l i)
  (if (null? l)
      (cons i '())
      (cons (car l) (copy-append-i (cdr l) i))))
(define (valid-board n a)
  (letrec ((loopi (lambda (i)
                    (if (= i n)
                        #t
                        (letrec ((loopj (lambda (j)
                                          (if (= j n)
                                              #t
                                              (let ((p (list-ref a i))
                                                    (q (list-ref a j)))
                                                (if (or (= q p) (= q (- p (- j i))) (= q (+ p (- j i))))
                                                    #f
                                                    (loopj (+ j 1))))))))
                          (if (not (loopj (+ i 1)))
                              #f
                              (loopi (+ i 1))))))))
    (loopi 0)))
(define (nqueens-seq data depth master)
  (if (= Size depth)
      (send master result)
      (letrec ((loop (lambda (i)
                       (if (= i Size)
                           #t
                           (let ((data2 (copy-append-i data i)))
                             (if (valid-board (+ depth 1) data2)
                                 (nqueens-seq data2 (+ depth 1) master)
                                 #t)
                             (loop (+ i 1)))))))
        (loop 0))))
(define worker-actor
  (actor "worker-actor" (master id)
           (work (data depth)
                 (if (= depth Size)
                     (send master result)
                     (if (>= depth Threshold)
                         (nqueens-seq data depth master)
                         (letrec ((loop (lambda (i)
                                          (if (= i Size)
                                              #t
                                              (let ((data2 (copy-append-i data i)))
                                                (if (valid-board (+ depth 1) data2)
                                                    (send master work data2 (+ depth 1))
                                                    #t)
                                                (loop (+ i 1)))))))
                           (loop 0))))
                 (send master done)
                 (become worker-actor master id))
           (stop ()
                 (send master stop)
                 (terminate))))
(define master (create master-actor-init))
(send master start)
