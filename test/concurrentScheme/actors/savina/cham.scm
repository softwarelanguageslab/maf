;; Adapted from Savina benchmarks ("Chameneos" benchmark, coming from Haller)
(define n-meetings (int-top))
(define n-chameneos (int-top))
(define (complement color other-color)
  (case color
    ((red) (case other-color
             ((red) 'red)
             ((yellow) 'blue)
             ((blue) 'yellow)
             (else 'faded)
             ;;((faded) 'faded)
             ))
    ((yellow) (case other-color
                ((red) 'blue)
                ((yellow) 'yellow)
                ((blue) 'red)
                (else 'faded)
                ;;((faded) 'faded)
                ))
    ((blue) (case other-color
              ((red) 'yellow)
              ((yellow) 'red)
              ((blue) 'blue)
              (else 'faded)
              ;;((faded) 'faded)
              ))
    (else 'faded)
    ;;((faded) 'faded)
    ))
(define (pick-color i)
  (case i
    ((0) 'red)
    ((1) 'yellow)
    ((2) 'blue)
    (else 'faded)
    ;;((3) 'faded)
    ))
(define mall-actor
  (actor "mall" (waiting-chameneo n sum-meetings num-faded)
           (meeting-count (count sender)
                          (if (= (+ num-faded 1) n-chameneos)
                              (terminate)
                              (become mall-actor waiting-chameneo n (+ sum-meetings count) (+ num-faded 1))))
           (meet (color sender)
                 (if (> n 0)
                     (if waiting-chameneo
                         (begin
                           (send waiting-chameneo meet color sender)
                          (become mall-actor #f (- n 1) sum-meetings num-faded))
                         (become mall-actor sender n sum-meetings num-faded))
                     (begin
                       (send sender exit a/self)
                       (become mall-actor waiting-chameneo n sum-meetings num-faded))))))
(define (create-mall)
  (letrec ((mall (create mall-actor #f n-meetings 0 0))
           (loop (lambda (i)
                   (if (= i n-chameneos)
                       'done
                       (begin
                         (create-chameneo mall (pick-color (modulo i 3)) i)
                         (loop (+ i 1)))))))
    (loop 0)
    mall))
(define chameneo-actor
  (actor "chameneo" (mall meetings color id)
           (meet (other-color sender)
                 (let ((new-color (complement color other-color)))
                   (send sender change new-color)
                   (send mall meet new-color a/self)
                   (become chameneo-actor mall meetings new-color id)))
           (change (new-color)
                   (send mall meet new-color a/self)
                   (become chameneo-actor mall (+ meetings 1) new-color id))
          (exit (sender)
                (send sender meeting-count meetings a/self)
                (terminate))))
(define (create-chameneo mall color id)
  (let ((chameneo (create chameneo-actor mall 0 color id)))
    (send mall meet color chameneo)
    chameneo))
(create-mall)
