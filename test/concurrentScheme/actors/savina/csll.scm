(define NumWorkers (int-top))
(define NumMsgsPerWorker (int-top))
(define SizePercent (modulo (int-top) 100))
(define WritePercent (modulo (int-top) 100))
(define (build-vector n f)
  (letrec ((v (make-vector n #f))
           (loop (lambda (i)
                   (if (< i n)
                       (begin
                         (vector-set! v i (f i))
                         (loop (+ i 1)))
                       v))))
    (loop 0)))
(define (vector-foreach f v)
  (letrec ((loop (lambda (i)
                   (if (< i (vector-length v))
                       (begin
                         (f (vector-ref v i))
                         (loop (+ i 1)))
                       'done))))
    (loop 0)))
(define master (actor "master" (workers sortedlist terminated)
                        (create-workers ()
                                        (let ((workers (build-vector NumWorkers (lambda (i) (create worker a/self sortedlist i 0)))))
                                          (vector-foreach (lambda (w) (send w do-work)) workers)
                                          (become master workers sortedlist terminated)))
                        (end-work ()
                                  (if (= (+ terminated 1) NumWorkers)
                                      (begin
                                        (send sortedlist end-work)
                                        (terminate))
                                      (become master workers sortedlist (+ terminated 1))))))
(define (worker-work self master sortedlist id message-count)
  (let ((an-int (random 100)))
    (if (< an-int SizePercent)
        (send sortedlist size self)
        (if (< an-int (+ SizePercent WritePercent))
            (send sortedlist write self (random 100))
            (send sortedlist contains self (random 100)))))
  (become worker master sortedlist id (+ message-count 1)))
(define worker (actor "worker" (master sortedlist id message-count)
                        (do-work () (worker-work a/self master sortedlist id message-count))
                        (result (value) (if (< message-count NumMsgsPerWorker)
                                            (worker-work a/self master sortedlist id message-count)
                                            (begin
                                              (send master end-work)
                                              (terminate))))))
(define sortedlist (actor "sortedlist" (state)
                            (write (sender value)
                                   (send sender result value)
                                   (become sortedlist (cons value state)))
                            (contains (sender value)
                                      (send sender result (pair? (member value state)))
                                      (become sortedlist state))
                            (size (sender)
                                  (send sender result (length state))
                                  (become sortedlist state))
                            (end-work () (terminate))))
(define l (create sortedlist '()))
(define m (create master #f l 0))
(send m create-workers)
