;; Adapted from Savina benchmarks ("Big" benchmark, from BenchErl)
(define num-messages (int-top))
(define num-workers (int-top))
(define (build-vector n f)
  (letrec ((v (make-vector n (f 0)))
           (loop (lambda (i)
                   (if (< i n)
                       (begin
                         (vector-set! v i (f i))
                         (loop (+ i 1)))
                       v))))
    (loop 1)))
(define (vector-foreach f v)
  (letrec ((loop (lambda (i)
                   (if (< i (vector-length v))
                       (begin
                         (f (vector-ref v i))
                         (loop (+ i 1)))
                       'done))))
    (loop 0)))
(define big-actor
  (actor "big" (id num-pings sink exp-pinger neighbors)
           (ping (sender-id)
                 (send (vector-ref neighbors sender-id) pong id)
                 (become big-actor id num-pings sink exp-pinger neighbors))
           (pong (sender)
                 (if (= sender exp-pinger)
                     (if (= num-pings num-messages)
                         (begin
                           (send sink exit)
                           (become big-actor id num-pings sink exp-pinger neighbors))
                         (let ((target (random (vector-length neighbors))))
                           (send (vector-ref neighbors target) ping id)
                           (become big-actor id (+ num-pings 1) sink target neighbors)))
                     (error "wrong sender")))
           (exit () (terminate))
           (neighbors (new-neighbors) (become big-actor id num-pings sink exp-pinger new-neighbors))))
(define sink-actor
  (actor "sink" (num-messages neighbors)
           (exit ()
                 (if (= (+ num-messages 1) num-workers)
                     (begin
                       (vector-foreach (lambda (a) (send a exit)) neighbors)
                       (terminate))
                     (become sink-actor (+ num-messages 1) neighbors)))
           (neighbors (new-neighbors)
                      (become sink-actor num-messages new-neighbors))))
(define sink (create sink-actor 0 #f))
(define big-actors (build-vector num-workers (lambda (i) (create big-actor i 0 sink -1 #f))))
(send sink neighbors big-actors)
(vector-foreach (lambda (a) (send a neighbors big-actors)) big-actors)
(vector-foreach (lambda (a) (send a pong -1)) big-actors)
