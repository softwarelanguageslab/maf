(define data-sizes
  (list 2 8 10 12 15 20 25 30 35 40 20 80 100 120 150 200 250 300 350 400))
(define jacobi-num-iter (int-top))
(define omega 1.25)
(define N (int-top))

(define (build-vector n f)
  (letrec ((v (make-vector n #f))
           (loop (lambda (i)
                   (if (< i n)
                       (begin
                         (vector-set! v i (f i))
                         (loop (+ i 1)))
                       v))))
    (loop 0)))

(define (for-each f l)
  (if (null? l)
      #t
      (if (pair? l)
          (begin (f (car l)) (for-each f (cdr l)))
          (error "Cannot for-each over a non-list"))))

(define (perform-computation theta)
  (let* ((sint (sin theta))
         (res (* sint sint)))
    (if (<= res 0)
        (error "unrealistic res value")
        res)))
(define (random-matrix M N)
  (make-vector M (make-vector N (int-top))))
(define A
  (let ((data-size (list-ref data-sizes N)))
    (random-matrix data-size data-size)))

(define (sor-runner-actor n)
  (let* ((s (list-ref data-sizes n))
         (part (inexact->exact (floor (/ s 2))))
         (sor-actors (make-vector (* s (+ part 1)) #f)))
    (define (boot self)
      (let ((my-border (make-vector s #f))
            (partial-matrix (build-vector s (lambda (i) (make-vector (- s part) 0))))) ;; randoms is A
        (letrec ((bloop1i (lambda (i)
                           (if (= i s) #t
                               (let ((c (modulo i 2)))
                                 (letrec ((bloop1j (lambda (j)
                                                    (if (= j part) #t
                                                        (let ((pos (+ (* i (+ part 1)) j)))
                                                          (set! c (- 1 c))
                                                          (vector-set! sor-actors pos (sor-actor pos (vector-ref (vector-ref A i) j)
                                                                                                 c s (+ part 1) omega self #f))
                                                          (if (= j (- part 1))
                                                              (vector-set! my-border i (vector-ref sor-actors pos))
                                                              #f)
                                                          (bloop1j (+ j 1)))))))
                                   (bloop1j 0)
                                   (bloop1i (+ i 1)))))))
                 (bloop2i (lambda (i)
                           (if (= i s) #t
                               (letrec ((bloop2j (lambda (j)
                                                  (if (= j (- s part)) #t
                                                      (begin
                                                        (vector-set! (vector-ref partial-matrix i) j (vector-ref (vector-ref A i) (+ j part)))
                                                        (bloop2j (+ j 1)))))))
                                 (bloop2j 0)
                                 (bloop2i (+ i 1)))))))
          (bloop1i 0)
          (bloop2i 0)
          (send (sor-peer s part partial-matrix my-border self) boot))))
    (letrec ((sor-runner-actor
              (actor "sor-runner" (g-total returned total-msg-rcv expecting-boot)
                       (boot ()
                             (boot a/self)
                             (become sor-runner-actor g-total returned total-msg-rcv #f))
                       (result (mx my mv msg-rcv)
                               (if expecting-boot (error "not booted yet!") #f)
                               (if (= (+ returned 1) (+ (* s part) 1))
                                   (terminate)
                                   (become sor-runner-actor (+ g-total mv) (+ returned 1) (+ total-msg-rcv msg-rcv) expecting-boot)))
                       (border (mborder)
                               (if expecting-boot (error "not booted yet!") #f)
                               (letrec ((rloop1i (lambda (i)
                                                  (if (= i s) #t
                                                      (begin
                                                        (vector-set! sor-actors (- (* (+ i 1) (+ part 1)) 1) (vector-ref mborder i))
                                                        (rloop1i (+ i 1))))))
                                        (rloop2i (lambda (i)
                                                  (if (= i s)
                                                      #t
                                                      (letrec ((rloop2j (lambda (j)
                                                                         (if (= j part)
                                                                             #t
                                                                             (let ((pos (+ (* i (+ part 1)) j)))
                                                                               (send (vector-ref sor-actors pos) start jacobi-num-iter sor-actors)
                                                                               (rloop2j (+ j 1)))))))
                                                        (rloop2j 0)
                                                        (rloop2i (+ i 1)))))))
                                 (rloop1i 0)
                                 (rloop2i 0))
                               (become sor-runner-actor g-total returned total-msg-rcv expecting-boot)))))
      (create sor-runner-actor 0 0 0 #t))))

(define (sor-actor pos value color nx ny omega sor-source peer)
  (define (cal-pos x1 y1)
    (+ (* x1 ny) y1))
  (let* ((x (inexact->exact (floor (/ pos ny))))
         (y (modulo pos ny))
         (omega-over-four (* 0.25 omega))
         (one-minus-omega (- 1.0 omega))
         (neighbors
          (if (and (> x 0) (< x (- nx 1)) (> y 0) (< y (- ny 1)))
              (list (cal-pos x (+ y 1)) (cal-pos (+ x 1) y) (cal-pos x (- y 1)) (cal-pos (- x 1) y))
              (if (and (or (= x 0) (= x (- nx 1))) (or (= y 0) (= y (- ny 1))))
                  (list (if (= x 0) (cal-pos (+ x 1) y) (cal-pos (- x 1) y))
                        (if (= y 0) (cal-pos x (+ y 1)) (cal-pos x (- y 1))))
                  (if (or (or (= x 0) (= x (- nx 1))) (or (= y 0) (= y (- ny 1))))
                      (if (or (= x 0) (= x (- nx 1)))
                          (list (if (= x 0) (cal-pos (+ x 1) y) (cal-pos (- x 1) y))
                                (cal-pos x (+ y 1)) (cal-pos x (- y 1)))
                          (list (if (= y 0) (cal-pos x (+ y 1)) (cal-pos x (- y 1)))
                                (cal-pos (+ x 1) y) (cal-pos (- x 1) y)))
                      '())))))
    (letrec ((sor-actor-actor (actor "sor-actor" (value iter max-iter msg-rcv sor-actors received-vals sum expecting-start pending-messages)
                             (start (mi mactors)
                                    (if (= color 1)
                                        (for-each (lambda (loop-neigh-index)
                                                    (send (vector-ref  mactors loop-neigh-index) value value))
                                                  neighbors)
                                        #f)
                                    (for-each (lambda (v) (send a/self sor-value v)) pending-messages)
                                    (become sor-actor-actor value (if (= color 1) (+ iter 1) iter) mi (if (= color 1) (+ msg-rcv 1) msg-rcv)
                                              mactors received-vals sum #f '()))
                             (sor-value (v)
                                        (if expecting-start
                                            (become sor-actor-actor value iter max-iter msg-rcv sor-actors received-vals sum expecting-start (cons v pending-messages))
                                            (if (< iter max-iter)
                                                (if (= (+ received-vals 1) (length neighbors))
                                                    (begin
                                                      (for-each (lambda (loop-neigh-index) (send (vector-ref sor-actors loop-neigh-index) value value)) neighbors)
                                                      (if (= (+ iter 1) max-iter)
                                                          (begin
                                                            (send sor-source result x y value msg-rcv)
                                                            (terminate))
                                                          (become sor-actor-actor (+ (* omega-over-four sum) (* one-minus-omega value))
                                                                    (+ iter 1) max-iter (+ msg-rcv 1) sor-actors (+ received-vals 1) (+ sum v) expecting-start pending-messages)))
                                                    (become sor-actor-actor value iter max-iter (+ msg-rcv 1) sor-actors (+ received-vals 1) (+ sum v) expecting-start pending-messages))
                                                (terminate)
                                                ))))))
      (create sor-actor-actor value 0 0 0 #f 0 0 #t '()))))

(define (sor-peer s part-start matrix-part border sor-source)
  (let ((sor-actors (make-vector (* s (+ (- s part-start) 1)) #f)))
    (define (boot self)
      (let ((my-border (make-vector s #f)))
        (letrec ((ploop1 (lambda (i)
                          (if (= i s) #t
                              (begin
                                (vector-set! sor-actors (* i (+ (- s part-start) 1)) (vector-ref border i))
                                (ploop1 (+ i 1))))))
                 (ploop2i (lambda (i)
                           (if (= i s) #t
                               (let ((c (modulo (+ i part-start) 2)))
                                 (letrec ((ploop2j (lambda (j)
                                                    (if (= j (+ (- s part-start) 1)) #t
                                                        (let ((pos (+ (* i (+ (- s part-start) 1)) j)))
                                                          (set! c (- 1 c))
                                                          (vector-set! sor-actors pos
                                                                       (sor-actor pos (vector-ref (vector-ref matrix-part i) (- j 1))
                                                                                  c s (+ (- s part-start) 1)
                                                                                  omega self #t))
                                                          (if (= j 1) (vector-set! my-border i (vector-ref sor-actors pos)) #f)
                                                          (ploop2j (+ j 1)))))))
                                   (ploop2j 1)
                                   (ploop2i (+ i 1)))))))
                 (ploop3i (lambda (i)
                           (if (= i s) #t
                               (letrec ((ploop3j (lambda (j)
                                                  (if (= j (+ (- s part-start) 1)) #t
                                                      (let ((pos (+ (* i (+ (- s part-start) 1)) j)))
                                                        (send (vector-ref sor-actors pos) start jacobi-num-iter sor-actors)
                                                        (ploop3j (+ j 1)))))))
                                 (ploop3j 1)
                                 (ploop3i (+ i 1)))))))
          (ploop1 0)
          (ploop2i 0)
          (send sor-source border my-border)
          (ploop3i 0))))
    (letrec ((sor-peer-actor (actor "sor-peer" (g-total returned total-msg-rcv expecting-boot)
                             (boot ()
                                   (boot a/self)
                                   (become sor-peer-actor g-total returned total-msg-rcv #f))
                             (result (mx my mv msg-rcv)
                                     (if expecting-boot (error "not booted yet") #f)
                                     (if (= (+ returned 1) (* s (- s part-start)))
                                         (begin (send sor-source result -1 -1 g-total total-msg-rcv)
                                                (terminate))
                                         (become sor-peer-actor (+ g-total mv) (+ returned 1) (+ total-msg-rcv msg-rcv) expecting-boot))))))
      (create sor-peer-actor 0 0 0 #t))))

(define sor-runner (sor-runner-actor N))
(send sor-runner boot)
