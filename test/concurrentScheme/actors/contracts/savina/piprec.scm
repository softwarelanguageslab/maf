(define NumWorkers (int-top))
(define Tolerance 0.1)
(define Precision (int-top))

(define (build-vector n f)
  (letrec ((v (make-vector n #f))
           (loop (lambda (i)
                   (if (< i n)
                       (begin
                         (vector-set! v i (f i))
                         (loop (+ i 1)))
                       v))))
    (loop 0)))
(define (vector-foreach f v)
  (letrec ((loop (lambda (i)
                   (if (< i (vector-length v))
                       (begin
                         (f (vector-ref v i))
                         (loop (+ i 1)))
                       'done))))
    (loop 0)))
(define (calculate-bbp-term scale k)
  (let* ((eight-k (* 8 k))
         (term1 (/ 4 (+ eight-k 1)))
         (term2 (- term1 (/ 1 (+ eight-k 4))))
         (term3 (- term2 (/ 1 (+ eight-k 5))))
         (term4 (- term3 (/ 1 (+ eight-k 6))))
         (term5 (/ term4 (expt 16 k))))
    (exact->inexact term5)))

(define worker-actor
  (actor "worker-actor" (master id terms-processed)
           (stop ()
                 (send master stop)
                 (terminate))
           (work (scale term)
                 (let ((result (calculate-bbp-term scale term)))
                   (send master result result id)
                   (become worker-actor master id (+ terms-processed 1))))))

(define master-actor
  (actor "master-actor" (workers result num-workers-terminated num-terms-requested num-terms-received stop-requests)
           (result (r id)
                   (let* ((stop-requests2 (<= (abs (- r Tolerance)) 0.1))
                          (num-terms-requested2
                           (if (not stop-requests)
                               (begin
                                 (send (vector-ref workers id) work Precision num-terms-requested)
                                 (+ num-terms-requested 1))
                               num-terms-requested)))
                     (if (= num-terms-requested2 num-terms-received)
                         (vector-foreach workers (lambda (w) (send w stop)))
                         #t)
                     (become master-actor workers (+ result r) num-workers-terminated num-terms-requested2 (+ num-terms-received 1) stop-requests2)))
           (stop ()
                 (if (= (+ num-workers-terminated 1) NumWorkers)
                     (terminate)
                     (become master-actor workers result (+ num-workers-terminated 1) num-terms-requested num-terms-received stop-requests)))))

(define master-actor-init
  (actor "master-actor-init" ()
           (start ()
                  (let ((workers (build-vector NumWorkers (lambda (i) (create worker-actor a/self i 0)))))
                    (letrec ((loop (lambda (i)
                                     (if (= i (min Precision (* 10 NumWorkers)))
                                         (become master-actor workers 0 0 i 0 #f)
                                         (begin
                                           (send (vector-ref workers (modulo i NumWorkers))
                                                   work Precision i)
                                           (loop (+ i 1)))))))
                      (loop 0))))))

(define master (create master-actor-init))
(send master start)
