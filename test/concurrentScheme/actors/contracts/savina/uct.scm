(define BinomialParam (int-top))
(define MaxNodes (int-top))
(define AvgCompSize (int-top))
(define CompSize (int-top))
(define StdDevCompSize (int-top))
(define UrgentNodePercent (int-top))
(define (rand-bool) (bool-top))

(define (build-vector n f)
  (letrec ((v (make-vector n (f 0)))
           (loop (lambda (i)
                   (if (< i n)
                       (begin
                         (vector-set! v i (f i))
                         (loop (+ i 1)))
                       v))))
    (loop 1)))


(define (build-vector2 n f)
  (letrec ((v (make-vector n (f 0)))
           (loop2 (lambda (i)
                   (if (< i n)
                       (begin
                         (vector-set! v i (f i))
                         (loop2 (+ i 1)))
                       v))))
    (loop2 1)))
(define (vector-foreach f v)
  (letrec ((loop (lambda (i)
                   (if (< i (vector-length v))
                       (begin
                         (f (vector-ref v i))
                         (loop (+ i 1)))
                       'done))))
    (loop 0)))

(define (get-next-normal pmean pdev)
  (letrec ((loop (lambda (i)
                   (if (> i 0)
                       i
                       (let ((temp (+ (* (random pdev)) pmean)))
                         (loop (inexact->exact (round temp))))))))
    (loop 0)))

(define (wait-loop busywait dummy)
  (letrec ((loop (lambda (k)
                   (if (= k (* dummy busywait))
                       k
                       (loop (+ k 1))))))
    (loop 0)))

(define root-actor
  (actor "root-actor" (height size children has-grant-children traversed final-size-printed)
           (generate-tree ()
                          (let* ((height2 (+ height 1))
                                 (size2 (+ size BinomialParam))
                                 (computation-size (get-next-normal AvgCompSize StdDevCompSize))
                                 (children2 (build-vector BinomialParam (lambda (i) (create node-actor a/self a/self height (+ size i) computation-size #f 0 #f #f (make-vector BinomialParam #f))))))
                            (vector-foreach (lambda (a) (send a try-generate-children)) children2)
                            (become root-actor height2 size2 children2 (make-vector BinomialParam #f) traversed final-size-printed)))
           (update-grant (child-id)
                         (vector-set! has-grant-children child-id #t)
                         (become root-actor height size children has-grant-children traversed final-size-printed))
           (should-generate-children (sender child-height)
                                     (if (<= (+ size BinomialParam) MaxNodes)
                                         (if (rand-bool)
                                             (let ((child-comp (get-next-normal CompSize StdDevCompSize)))
                                               (if (> (random 100) UrgentNodePercent)
                                                   (send sender generate-children size child-comp)
                                                   (send sender urgent-generate-children (random BinomialParam) size child-comp))
                                               (become root-actor (if (> (+ child-height 1) height) (+ child-height 1) height) (+ size BinomialParam) children has-grant-children traversed final-size-printed))
                                             (become root-actor child-height size children has-grant-children traversed final-size-printed))
                                         (begin
                                           (if (not traversed) (vector-foreach (lambda (a) (send a traverse)) children) #t)
                                           (if (not final-size-printed) (display "...") #t)
                                           (vector-foreach (lambda (a) (send a terminate)) children)
                                           (terminate))))
           (print-info ()
                       (vector-foreach (lambda (a) (send a print-info)) children)
                       (become root-actor height size children has-grant-children traversed final-size-printed))
           (terminate ()
                         (vector-foreach (lambda (a) (send a terminate)) children)
                         (terminate))))

(define node-actor
  (actor "node-actor" (parent root height id comp-size is-urgent urgent-child has-children children has-grant-children)
           (try-generate-children ()
                                  (wait-loop 100 40000)
                                  (send root should-generate-children a/self height)
                                  (become node-actor parent root height id comp-size is-urgent urgent-child has-children children has-grant-children))
           (generate-children (current-id children-comp-size)
                              (let* ((array-id (modulo id BinomialParam))
                                     (children-height (+ height 1))
                                     (children2 (build-vector2 BinomialParam (lambda (i)
                                                                              (let ((c (create node-actor a/self root children-height (+ current-id 1) children-comp-size #f 0 #f #f (make-vector BinomialParam #f))))
                                                                                (send c try-generate-children)
                                                                                c)))))
                                (send parent update-grant array-id)
                                (become node-actor parent root height id comp-size is-urgent urgent-child #t children2 has-grant-children)))
           (urgent-generate-children (urgent-child-id current-id children-comp-size)
                                     (let* ((array-id (modulo id BinomialParam))
                                            (children-height (+ height 1))
                                            (children2 (build-vector2 BinomialParam (lambda (i)
                                                                                     (let ((c (create node-actor a/self root children-height (+ current-id 1) children-comp-size (= i urgent-child-id) 0 #f #f (make-vector BinomialParam #f))))
                                                                                       (send c try-generate-children)
                                                                                       c)))))
                                       (send parent update-grant array-id)
                                       (become node-actor parent root height id comp-size is-urgent urgent-child-id #t children2 has-grant-children)))
           (update-grant (child-id)
                                 (vector-set! has-grant-children child-id #t)
                                 (become node-actor parent root height id comp-size is-urgent urgent-child has-children children has-grant-children))
           (traverse ()
                     (wait-loop comp-size 40000)
                     (if has-children
                         (vector-foreach (lambda (a) (send a traverse)) children)
                         #t)
                     (become node-actor parent root height id comp-size is-urgent urgent-child has-children children has-grant-children))
           (urgent-traverse ()
                            (wait-loop comp-size 40000)
                            (if has-children
                                (letrec ((loop (lambda (i)
                                                 (if (= i (vector-length children))
                                                     #t
                                                     (begin
                                                       (if (= i urgent-child)
                                                           (send (vector-ref children i) urgent-traverse)
                                                           (send (vector-ref children i) traverse))
                                                       (loop (+ i 1)))))))
                                  (loop 0))
                                #t)
                            (become node-actor parent root height id comp-size is-urgent urgent-child has-children children has-grant-children))
           (print-info ()
                       (if has-children
                           (vector-foreach (lambda (a) (send a print-info)) children)
                           #t)
                       (become node-actor parent root height id comp-size is-urgent urgent-child has-children children has-grant-children))
           (terminate ()
                      (if has-children
                          (vector-foreach (lambda (a) (send a terminate)) children)
                          #t)
                      (terminate))))
(define root
  (create root-actor 1 1 #f (make-vector BinomialParam #f) #f #f))
(send root generate-tree)
