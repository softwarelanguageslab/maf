(letrec ((call-loop (lambda (n f)
                      (if (= n 1)
                          (send f call (int-top))
                          (begin
                            (send f call (int-top))
                            (call-loop (- n 1) f)))))
         (factory-actor (actor "factory" (p)
                               (call (in)
                                     (send p update self in)
                                     (become factory-wait-actor p))))
         (factory-wait-actor (actor "factory-wait" (p)
                                    (done ()
                                          (become factory-actor p))
                                    (call (n)
                                          (send self call n)
                                          (become factory-wait-actor p))))
         (state-actor (actor "state" (n newstate)
                             (update (p in)
                                     (let ((m (newstate n in)))
                                       (send p done)
                                       (become state-actor m newstate)))))
         (state (create state-actor (int-top) (lambda (x y) (int-top))))
         (factory (create factory-actor state)))
  (call-loop (int-top) factory))
